/*
    This is an autogenerated file.
    Remove this comment if you don't want your changes to this file to be overwritten.
*/
import { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';
import { Inject, Injectable } from '@angular/core';
import { AugurHttpRequest, IAugurHttpRequest } from '@augur';
import { PlacementTestInviteModel } from '@src/app/web-api-controllers/placement-tests/models/placement-test-invite-model';
import { PlacementTestProgressModel } from '@src/app/web-api-controllers/placement-tests/models/placement-test-progress-model';
import { CompleteReadingTestRequestModel } from '@src/app/web-api-controllers/placement-tests/models/complete-reading-test-request-model';
import { CompleteListeningTestRequestModel } from '@src/app/web-api-controllers/placement-tests/models/complete-listening-test-request-model';
import { PlacementTestInvitation } from '@src/app/entities/placement-test-invitation';
import { PlacementTestStartResultModel } from '@src/app/web-api-controllers/placement-tests/models/placement-test-start-result-model';
import { PlacementTest } from '@src/app/entities/placement-test';
import { PlacementTestQuestionsModel } from '@src/app/web-api-controllers/placement-tests/models/placement-test-questions-model';
import { GetReadingTestResultModel } from '@src/app/web-api-controllers/placement-tests/models/get-reading-test-result-model';
import { GetListeningTestResultModel } from '@src/app/web-api-controllers/placement-tests/models/get-listening-test-result-model';
import { PlacementTestResultModel } from '@src/app/web-api-controllers/placement-tests/models/placement-test-result-model';

@Injectable({
    providedIn: 'root'
})
export class PlacementTestsController {

    constructor(protected http: HttpClient, @Inject('BASE_URL')protected baseUrl: string) {
        
        this.invite = this.invite.bind(this);
        this.getInvitationByToken = this.getInvitationByToken.bind(this);
        this.start = this.start.bind(this);
        this.get = this.get.bind(this);
        this.getQuestionsWithinRating = this.getQuestionsWithinRating.bind(this);
        this.updateProgress = this.updateProgress.bind(this);
        this.getReadingTest = this.getReadingTest.bind(this);
        this.completeReadingTest = this.completeReadingTest.bind(this);
        this.getListeningTest = this.getListeningTest.bind(this);
        this.completeListeningTest = this.completeListeningTest.bind(this);
        this.getResult = this.getResult.bind(this);
    }

    controllerRoute: string = 'api/placementTests';
    
    invite(model: PlacementTestInviteModel): IAugurHttpRequest {
        
        return this.http.post(this.baseUrl + this.controllerRoute + `/invite`, model ? model : {})
            .toAugurHttpRequestWithValidation();
    }
    getInvitationByToken(token: string): AugurHttpRequest<PlacementTestInvitation> {
        const queryParams = new HttpParams()
            .set('token', token ? token.toString() : '');
        
        return this.http.get(this.baseUrl + this.controllerRoute + `/getInvitationByToken`, { params: queryParams })
            .toAugurHttpRequestWithValidation<PlacementTestInvitation>();
    }
    start(languageId: number, reportedLevelId?: number, invitationId?: number, rating?: number, rd?: number, vol?: number, shouldTestReading?: boolean, shouldTestListening?: boolean): AugurHttpRequest<PlacementTestStartResultModel> {
        const queryParams = new HttpParams()
            .set('languageId', languageId ? languageId.toString() : '')
            .set('reportedLevelId', reportedLevelId ? reportedLevelId.toString() : '')
            .set('invitationId', invitationId ? invitationId.toString() : '')
            .set('rating', rating ? rating.toString() : '')
            .set('rd', rd ? rd.toString() : '')
            .set('vol', vol ? vol.toString() : '')
            .set('shouldTestReading', shouldTestReading ? shouldTestReading.toString() : '')
            .set('shouldTestListening', shouldTestListening ? shouldTestListening.toString() : '');
        
        return this.http.post(this.baseUrl + this.controllerRoute + `/start`, null, { params: queryParams })
            .toAugurHttpRequestWithValidation<PlacementTestStartResultModel>();
    }
    get(id: number): AugurHttpRequest<PlacementTest> {
        const queryParams = new HttpParams()
            .set('id', id ? id.toString() : '');
        
        return this.http.get(this.baseUrl + this.controllerRoute + `/get`, { params: queryParams })
            .toAugurHttpRequestWithValidation<PlacementTest>();
    }
    getQuestionsWithinRating(rating: number, rd: number, languageId: number, count: number, placemetTestId?: number): AugurHttpRequest<PlacementTestQuestionsModel> {
        const queryParams = new HttpParams()
            .set('rating', rating ? rating.toString() : '')
            .set('rd', rd ? rd.toString() : '')
            .set('languageId', languageId ? languageId.toString() : '')
            .set('count', count ? count.toString() : '')
            .set('placemetTestId', placemetTestId ? placemetTestId.toString() : '');
        
        return this.http.get(this.baseUrl + this.controllerRoute + `/getQuestionsWithinRating`, { params: queryParams })
            .toAugurHttpRequestWithValidation<PlacementTestQuestionsModel>();
    }
    updateProgress(model: PlacementTestProgressModel): IAugurHttpRequest {
        
        return this.http.post(this.baseUrl + this.controllerRoute + `/updateProgress`, model ? model : {})
            .toAugurHttpRequestWithValidation();
    }
    getReadingTest(placementTestId: number): AugurHttpRequest<GetReadingTestResultModel> {
        const queryParams = new HttpParams()
            .set('placementTestId', placementTestId ? placementTestId.toString() : '');
        
        return this.http.get(this.baseUrl + this.controllerRoute + `/getReadingTest`, { params: queryParams })
            .toAugurHttpRequestWithValidation<GetReadingTestResultModel>();
    }
    completeReadingTest(model: CompleteReadingTestRequestModel): IAugurHttpRequest {
        
        return this.http.post(this.baseUrl + this.controllerRoute + `/completeReadingTest`, model ? model : {})
            .toAugurHttpRequestWithValidation();
    }
    getListeningTest(placementTestId: number): AugurHttpRequest<GetListeningTestResultModel> {
        const queryParams = new HttpParams()
            .set('placementTestId', placementTestId ? placementTestId.toString() : '');
        
        return this.http.get(this.baseUrl + this.controllerRoute + `/getListeningTest`, { params: queryParams })
            .toAugurHttpRequestWithValidation<GetListeningTestResultModel>();
    }
    completeListeningTest(model: CompleteListeningTestRequestModel): IAugurHttpRequest {
        
        return this.http.post(this.baseUrl + this.controllerRoute + `/completeListeningTest`, model ? model : {})
            .toAugurHttpRequestWithValidation();
    }
    getResult(placementTestId: number): AugurHttpRequest<PlacementTestResultModel> {
        const queryParams = new HttpParams()
            .set('placementTestId', placementTestId ? placementTestId.toString() : '');
        
        return this.http.get(this.baseUrl + this.controllerRoute + `/getResult`, { params: queryParams })
            .toAugurHttpRequestWithValidation<PlacementTestResultModel>();
    }
}